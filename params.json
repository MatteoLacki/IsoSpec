{
  "name": "Isospec",
  "tagline": "Hyperfast Isotopic Structure Calculator.",
  "body": "## What is IsoSpec? \r\n\r\nIsoSpec is a **fine structure isotopic calculator**.\r\n\r\nGiven a molecular formula and some probability threshold *0 < P < 1*, it will provide you with the smallest possible set of <a href=\"http://goldbook.iupac.org/I03351.html\" target=\"_self\">isotopologues</a> that are jointly *P* probable. \r\n\r\n### *Example*\r\nSay, that you happen to be interested in the top 50% probable isotopologues of <a href=\"http://www.rcsb.org/pdb/explore.do?structureId=2zp6\" target=\"_self\">*Bovine Insulin*</a>. We happen to know, that its molecular formula is C<sub>254</sub>H<sub>377</sub>N<sub>65</sub>O<sub>75</sub>S<sub>6</sub>. \r\n\r\nIn that case, IsoSpec would provide you with:\r\n\r\n|   |            mass|  probability| <sup>1</sup>H| <sup>2</sup>H| <sup>12</sup>C| <sup>13</sup>C| <sup>14</sup>N| <sup>15</sup>N| <sup>16</sup>O| <sup>17</sup>O| <sup>18</sup>O| <sup>32</sup>S| <sup>33</sup>S| <sup>34</sup>S| <sup>36</sup>S|\r\n|:--|---------------:|------------:|-------------:|-------------:|--------------:|--------------:|--------------:|--------------:|--------------:|--------------:|--------------:|--------------:|--------------:|--------------:|--------------:|\r\n|1  | 5731.6075806688| 0.1123023514|           377|             0|            252|              2|             65|              0|             75|              0|              0|              6|              0|              0|              0|\r\n|2  | 5732.6109355040| 0.1028778936|           377|             0|            251|              3|             65|              0|             75|              0|              0|              6|              0|              0|              0|\r\n|3  | 5730.6042258336| 0.0814037470|           377|             0|            253|              1|             65|              0|             75|              0|              0|              6|              0|              0|              0|\r\n|4  | 5733.6142903392| 0.0704027660|           377|             0|            250|              4|             65|              0|             75|              0|              0|              6|              0|              0|              0|\r\n|5  | 5734.6176451744| 0.0383896060|           377|             0|            249|              5|             65|              0|             75|              0|              0|              6|              0|              0|              0|\r\n|7  | 5733.6033765247| 0.0301636876|           377|             0|            252|              2|             65|              0|             75|              0|              0|              5|              0|              1|              0|\r\n|6  | 5729.6008709984| 0.0293871014|           377|             0|            254|              0|             65|              0|             75|              0|              0|              6|              0|              0|              0|\r\n|8  | 5734.6067313599| 0.0276323390|           377|             0|            251|              3|             65|              0|             75|              0|              0|              5|              0|              1|              0|\r\n|9  | 5732.6046155640| 0.0266824062|           377|             0|            252|              2|             64|              1|             75|              0|              0|              6|              0|              0|              0|\r\n\r\n\r\nNow, how this could be of any use to **you**? Well, we did suppose you are rather into ...\r\n\r\n### Mass Spectrometry\r\n\r\n\r\nSay **you** hoped to know, if *Bovine Insulin* is present in the sample you analyzed with your <a href=\"https://en.wikipedia.org/wiki/Mass_spectrometry\" target=\"_self\">**mass spectrometer**</a>.\r\nHow would you do that? \r\n\r\nYou would use our software to generate the isotopologues and then try to find them in the experimental spectrum.\r\n\r\n\r\n\r\n\r\n\r\n## How to install IsoSpec?\r\n\r\nIsoSpec is written in **C++** has bindings to **Python** (IsoSpecPy), **R** (IsoSpecR), and **C**. \r\n\r\n### Python\r\n**IMPORTANT**: please note that the Python package is standalone, in the\r\nsense that it does not need the C/C++ library to be installed separately.\r\n\r\nRequirements:\r\n* Python (v2 and v3 are \r\n* C++11 compiler: clang++ (v3.3 or later) or g++ (v4.7 or later)\r\n* setuptools\r\n* cffi (this, if not present, will be automatically downloaded and\r\n          installed by the setup script, however you may prefer to use \r\n          your distribution's package manager to install that)\r\n\r\n\r\n```\r\npip install IsoSpecPy\r\n```\r\n\r\nalternatively, you can download our package from here and then\r\n\r\n```\r\ncd IsoSpecPy\r\nsudo python setup.py install\r\n```\r\n\r\nAgain, clang++ is the preferred compiler and will be used if found by the \r\nsetup script. If you want to override the behaviour (if you have clang++ \r\ninstalled, but still want to use g++) you will have to replace the last \r\ncommand with:\r\n\r\n```\r\nISO_USE_DEFAULT_CXX=TRUE sudo python setup.py install\r\n```\r\n\r\n### R\r\n\r\nRequirements:\r\n* R (>= 3.2.1)\r\n\r\nThe package is hosted at <a href=\"https://cran.r-project.org/web/packages/IsoSpecR/index.html\" target=\"_self\">**CRAN**</a>. \r\nThis means that it can be automatically downloaded. Just start an R console (or R studio) and run\r\n\r\n```R\r\n    install.packages('IsoSpecR')\r\n```\r\n\r\nThen, follow the instructions. For Windows users, this will result in downloading a precompiled version of the package.\r\n\r\nThe package can be also directly downloaded from this page. If you use either Linux of Mac OSX, then simply:\r\n\r\n1. Download the package.\r\n2. Move to the folder containing the IsoSpecR folder. \r\n3. Run in terminal\r\n\r\n```\r\n\tR CMD build IsoSpecR \r\n\tR CMD INSTALL IsoSpecR_1.0.tar.gz  \r\n```\r\n\r\nAll necessary packages should download automatically. \r\n\r\n\r\n### C/C++\r\n\r\nRequirements:\r\n\r\n* C++11 compiler: clang++ (v3.3 or later) or g++ (v4.7 or later)\r\n* Make (GNU make is OK)\r\n\r\n\r\nNote: clang++ is the default (and preferred) compiler as it produces \r\nfaster code (in our tests, the difference in speed is about 20%). \r\nIf you'd like to use g++ instead, please edit the first line of \r\nIsoSpec++/Makefile appropriately.\r\n\r\nNext, execute the following commands:\r\n\r\n```\r\ncd IsoSpec++\r\nmake\r\n```\r\n\r\nYou may copy the resulting .so file to a convenient location.\r\nIf you wish to develop software using this library, you will also \r\nhave to place the header files (*.hpp/*.h) somewhere your C/C++\r\ncompiler can find them.\r\n\r\n## Here are some example sessions:\r\n\r\n### Python\r\n\r\n```python\r\n# Calculates the isotopic distribution of water in several ways\r\n\r\nfrom IsoSpecPy import IsoSpecPy\r\nfrom math import exp\r\n\r\ni = IsoSpecPy.IsoSpec.IsoFromFormula(\"H2O1\", 0.9)\r\n\r\nprint \"The isotopologue set containing at least 0.9 probability has\", len(i), \"element(s)\"\r\n\r\nconfs = i.getConfs()\r\n\r\nprint \"The first configuration has the following parameters:\"\r\nprint \"Mass:\", confs[0][0]\r\nprint \"log(probability):\", confs[0][1] \r\nprint \"probability:\", exp(confs[0][1])\r\nprint \"Number of Protium atoms:\", confs[0][2][0][0]\r\nprint \"Number of Deuterium atoms\", confs[0][2][0][1]\r\nprint \"Number of O16 atoms:\", confs[0][2][1][0]\r\nprint \"Number of O17 atoms:\", confs[0][2][1][1]\r\nprint \"Number of O18 atoms:\", confs[0][2][1][2]\r\n\r\nprint\r\nprint \"Now what if both isotopes of hydrogen were equally probable, while prob. of O16 was 50%, O17 at 30% and O18 at 20%?\"\r\n\r\nhydrogen_probs = (0.5, 0.5)\r\noxygen_probs = (0.5, 0.3, 0.2)\r\nhydrogen_masses = (1.00782503207, 2.0141017778)\r\noxygen_masses = (15.99491461956, 16.99913170, 17.9991610)\r\natom_counts = (2, 1)\r\n\r\ni = IsoSpecPy.IsoSpec(atom_counts, (hydrogen_masses, oxygen_masses), (hydrogen_probs, oxygen_probs), 0.9)\r\n\r\nprint \"The isotopologue set containing at least 0.9 probability has\", len(i), \"element(s)\"\r\n\r\nconfs = i.getConfs()\r\n\r\nprint \"The first configuration has the following parameters:\"\r\nprint \"Mass:\", confs[0][0]\r\nprint \"log-prob:\", confs[0][1]\r\nprint \"probability:\", exp(confs[0][1])\r\nprint \"Number of Protium atoms:\", confs[0][2][0][0]\r\nprint \"Number of Deuterium atoms\", confs[0][2][0][1]\r\nprint \"Number of O16 atoms:\", confs[0][2][1][0]\r\nprint \"Number of O17 atoms:\", confs[0][2][1][1]\r\nprint \"Number of O18 atoms:\", confs[0][2][1][2]\r\n```\r\n\r\n### R\r\n\r\n```R\r\nlibrary(IsoSpecR)\r\n\r\n# A water molecule:\r\nwater <- c(H=2,O=1)\r\n\r\n# Desired joint probability p of the p-optimal set of isotopologues (90%): \r\np <- .9\r\n\r\n# The fancy representation of the results is on.\r\n# ATTENTION: while turned on, the algorithm's time complexity is nlog(n) instead of linear.\r\nres <- IsoSpecify( molecule=water, stopCondition=.99, fancy=TRUE )\r\n\r\nprint('The first configuration has the following parameters:')\r\nprint('Mass:');res$mass\r\nprint('log(probability):');res$logProb\r\nprint('probability:');res$prob\r\nprint('Number of Protium atoms:');res$H1\r\nprint('Number of Deuterium atoms:');res$H2\r\nprint('Number of O16 atoms:');res$O16\r\nprint('Number of O17 atoms:');res$O17\r\nprint('Number of O18 atoms:');res$O18\r\n\r\nprint(\"Now what if both isotopes of hydrogen were equally probable, while prob. of O16 was 50%, O17 at 30% and O18 at 20%?\")\r\nprint('In R, we have to preper additional parameter for the algorithm: a data.frame containing the new isotopic ratios.')\r\nmodifiedIsotopes <- data.frame(\r\n\telement = c('H', 'H', 'O', 'O', 'O'),\r\n\tisotope = c('H1', 'H2', 'O16', 'O17', 'O18'),\r\n\tmass  \t= c(1.00782503207, 2.0141017778,15.99491461956, 16.99913170, 17.9991610),\r\n\tabundance = c(0.5, 0.5,0.5, 0.3, 0.2)\r\n)\r\n\r\nmodRes <- IsoSpecify( molecule=water, stopCondition=.99, fancy=TRUE, isotopes=modifiedIsotopes )\r\n\r\nprint('The number of configuration must be bigger, the probability being less concentrated on any isotope.')\r\nmodRes\r\n```\r\n\r\n### C++\r\n\r\n```C++\r\n\r\n#include <iostream>\r\n#include \"../../IsoSpec++/isoSpec++.hpp\"\r\n\r\n\r\nint main()\r\n{\r\n    IsoSpec* iso = IsoSpec::IsoFromFormula(\"H2O1\", 0.9);\r\n\r\n    iso->processConfigurationsUntilCutoff();\r\n\r\n    std::cout <<  \"The isotopologue set containing at least 0.9 probability has \" << iso->getNoVisitedConfs() << \" element(s)\" << std::endl;\r\n\r\n    std::tuple<double*,double*,int*,int> product = iso->getCurrentProduct();\r\n\r\n    double* masses = std::get<0>(product);\r\n    double* logprobs = std::get<1>(product);\r\n    int* configs = std::get<2>(product);\r\n\r\n    std::cout << \"The first configuration has the following parameters: \" << std::endl;\r\n    std::cout << \"Mass: \" << masses[0] << std::endl;\r\n    std::cout << \"log-prob: \" << logprobs[0] << std::endl;\r\n    std::cout << \"probability: \" << exp(logprobs[0]) << std::endl;\r\n\r\n    // Successive isotopologues are ordered by the appearance in the formula of the element, then by nucleon number, and concatenated into one array\r\n    std::cout << \"Protium atoms: \" << configs[0] << std::endl;\r\n    std::cout << \"Deuterium atoms \" << configs[1] << std::endl;\r\n    std::cout << \"O16 atoms: \" << configs[2] << std::endl;\r\n    std::cout << \"O17 atoms: \" << configs[3] << std::endl;\r\n    std::cout << \"O18 atoms: \" << configs[4] << std::endl;\r\n\r\n    delete iso;\r\n    delete masses;\r\n    delete logprobs;\r\n    delete configs;\r\n\r\n\r\n    std::cout << \"Now what if both isotopes of hydrogen were equally probable, while prob. of O16 was 50%, O17 at 30% and O18 at 20%?\" << std::endl;\r\n\r\n    const int elementNumber = 2;\r\n    const int isotopeNumbers[2] = {2,3};\r\n\r\n    const int atomCounts[2] = {2,1};\r\n\r\n\r\n    const double hydrogen_masses[2] = {1.00782503207, 2.0141017778};\r\n    const double oxygen_masses[3] = {15.99491461956, 16.99913170, 17.9991610};\r\n\r\n    const double* isotope_masses[2] = {hydrogen_masses, oxygen_masses};\r\n\r\n    const double hydrogen_probs[2] = {0.5, 0.5};\r\n    const double oxygen_probs[3] = {0.5, 0.3, 0.2};\r\n\r\n    const double* probs[2] = {hydrogen_probs, oxygen_probs};\r\n\r\n\r\n\r\n    iso = new IsoSpecLayered(elementNumber, isotopeNumbers, atomCounts, isotope_masses, probs, 0.9);\r\n\r\n    iso->processConfigurationsUntilCutoff();\r\n\r\n    std::cout <<  \"The isotopologue set containing at least 0.9 probability has \" << iso->getNoVisitedConfs() << \" element(s)\" << std::endl;\r\n\r\n    product = iso->getCurrentProduct();\r\n\r\n    masses = std::get<0>(product);\r\n    logprobs = std::get<1>(product);\r\n    configs = std::get<2>(product);\r\n\r\n    std::cout << \"The first configuration has the following parameters: \" << std::endl;\r\n    std::cout << \"Mass: \" << masses[0] << std::endl;\r\n    std::cout << \"log-prob: \" << logprobs[0] << std::endl;\r\n    std::cout << \"probability: \" << exp(logprobs[0]) << std::endl;\r\n\r\n    // Successive isotopologues are ordered by the appearance in the formula of the element, then by nucleon number, and concatenated into one array\r\n    std::cout << \"Protium atoms: \" << configs[0] << std::endl;\r\n    std::cout << \"Deuterium atoms \" << configs[1] << std::endl;\r\n    std::cout << \"O16 atoms: \" << configs[2] << std::endl;\r\n    std::cout << \"O17 atoms: \" << configs[3] << std::endl;\r\n    std::cout << \"O18 atoms: \" << configs[4] << std::endl;\r\n\r\n    delete iso;\r\n    delete masses;\r\n    delete logprobs;\r\n    delete configs;\r\n}\r\n```\r\n\r\n## Interested in IsoSpec?\r\n\r\nContact us! Mail to:\r\n\r\n* matteo.lacki@gmail.com \r\n\r\nor \r\n\r\n* mist@mimuw.edu.pl\r\n\r\nand we might help you in including our software in your project!",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}