From: Filippo Rusconi <lopippo@debian.org>
Date: Tue, 9 Jun 2020 15:30:29 +0200
Subject: Modify the CMake-based build system.

The modifications provide the following:

- a framework in which it will be easy to add new platforms.
  Currently, the UNIX (not APPLE) is tested.
- the possibility to define the install prefix (typically /usr).
- Nice output during configuration of the build.
- Files intended for the CMake build framework (find| config) files.
- A pkg-config file for use with the pkg-config system.
---
 CMakeLists.txt                                     | 187 +++++++++++++++++++++
 CMakeStuff/modules/FindIsoSpec++.cmake             |  34 ++++
 CMakeStuff/modules/IsoSpec++Config.cmake.in        |  22 +++
 CMakeStuff/modules/pkgconfig/libisospec++.pc.in    |  12 ++
 CMakeStuff/outputColors.cmake                      |  18 ++
 CMakeStuff/systemUname.cmake                       |  18 ++
 CMakeStuff/toolchains/mxe-toolchain.cmake          |  29 ++++
 CMakeStuff/toolchains/unix-toolchain.cmake         |  35 ++++
 .../toolchains/win10-mingw64-toolchain.cmake       |  13 ++
 IsoSpec++/CMakeLists.txt                           |  81 ++++++---
 10 files changed, 425 insertions(+), 24 deletions(-)
 create mode 100644 CMakeLists.txt
 create mode 100644 CMakeStuff/modules/FindIsoSpec++.cmake
 create mode 100644 CMakeStuff/modules/IsoSpec++Config.cmake.in
 create mode 100644 CMakeStuff/modules/pkgconfig/libisospec++.pc.in
 create mode 100644 CMakeStuff/outputColors.cmake
 create mode 100644 CMakeStuff/systemUname.cmake
 create mode 100644 CMakeStuff/toolchains/mxe-toolchain.cmake
 create mode 100644 CMakeStuff/toolchains/unix-toolchain.cmake
 create mode 100644 CMakeStuff/toolchains/win10-mingw64-toolchain.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..2df0765
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,187 @@
+#############################################################
+#############################################################
+# CMake configuration
+cmake_minimum_required(VERSION 3.12)
+
+# CMake script for the IsoSpec library
+# Author: Filippo Rusconi
+# Created: June 2020
+
+############################################################
+############################################################
+# Basic information about project
+
+project(IsoSpec CXX C)
+
+set(ISOSPEC_VERSION_MAJOR "2")
+set(ISOSPEC_VERSION_MINOR "1")
+set(ISOSPEC_VERSION_PATCH "0")
+set(ISOSPEC_LIB_NAME "libIsoSpec++")
+set(ISOSPEC_VERSION "${ISOSPEC_VERSION_MAJOR}.${ISOSPEC_VERSION_MINOR}.${ISOSPEC_VERSION_PATCH}")
+set(VERSION 2.1.0)
+set(ISOSPEC_LIB_VERSION ${ISOSPEC_VERSION})
+set(ISOSPEC_LIB_SOVERSION ${ISOSPEC_VERSION_MAJOR})
+
+# Command to enable debug mode
+# cmake -DCMAKE_BUILD_TYPE=Debug 
+
+
+# This setting is also typically overridden by 
+# configuring the build system like this:
+# cmake -DCMAKE_INSTALL_PREFIX=/usr
+# It needs to be set before include(GNUInstallDirs)
+# below, because it roots all the other dirs' configs.
+
+if(NOT CMAKE_INSTALL_PREFIX)
+	set(CMAKE_INSTALL_PREFIX /usr)
+endif()
+
+# This module sets a number of installation directories 
+# according to the GNU coding standards. It takes the
+# CMAKE_INSTALL_PREFIX and then add the directories to it.
+include(GNUInstallDirs)
+
+# Add folder where are supportive functions
+# that contain toolchains: for UNIX/WIN/MAC
+# that contain modules useful on any system.
+set(CMAKE_UTILS_PATH ${CMAKE_SOURCE_DIR}/CMakeStuff)
+set(CMAKE_TOOLCHAINS_PATH ${CMAKE_UTILS_PATH}/toolchains)
+set(CMAKE_MODULE_PATH ${CMAKE_UTILS_PATH}/modules)
+#message("CMAKE_MODULE_PATH:" ${CMAKE_MODULE_PATH})
+
+# This says that when compiling, .h files must also be
+# searche in the current directory where cpp files are 
+# compiled.
+set(CMAKE_INCLUDE_CURRENT_DIR ON)
+
+# Include the system's uname that fills in SYSTEM_UNAME_S.
+# Sets WIN64 if SYSTEM_UNAME_S is "^.*MING64.*"
+include(${CMAKE_UTILS_PATH}/systemUname.cmake)
+
+# Include the various colors we want to use in the output
+include(${CMAKE_UTILS_PATH}/outputColors.cmake)
+
+set(CMAKE_COLOR_MAKEFILE ON)
+set(CMAKE_VERBOSE_MAKEFILE ON)
+
+message("")
+message("\n${BoldRed}Configuring build for project ${PROJECT}${ColourReset}\n")
+message("")
+
+# This export will allow using the flags to be used by
+# youcompleteme (vim plugin).
+set(CMAKE_EXPORT_COMPILE_COMMANDS 1)
+
+if(EXISTS "${CMAKE_CURRENT_BINARY_DIR}/compile_commands.json" )
+	execute_process( COMMAND cmake -E copy_if_different
+		${CMAKE_CURRENT_BINARY_DIR}/compile_commands.json
+		${CMAKE_CURRENT_SOURCE_DIR}/compile_commands.json
+		)
+endif()
+
+
+# We want C++17
+set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_STANDARD_REQUIRED ON)
+message(STATUS "${BoldGreen}CMAKE_CXX_COMPILER: ${CMAKE_CXX_COMPILER}${ColourReset}")
+
+#############################################################
+# We do not want warnings for unknown pragmas:
+message(STATUS "${BoldGreen}Setting definition -Wno-unknown-pragmas.${ColourReset}")
+add_definitions(-Wno-unknown-pragmas)
+
+# Enable warnings and possibly treat them as errors
+message(STATUS "${BoldGreen}Setting definition -Wall.${ColourReset}")
+add_definitions(-Wall)
+message(STATUS "${BoldGreen}Setting definition -Wextra.${ColourReset}")
+add_definitions(-Wextra)
+message(STATUS "${BoldGreen}Setting definition -pedantic.${ColourReset}")
+add_definitions(-pedantic)
+
+if(WARN_AS_ERROR)
+	message(STATUS "${BoldYellow}Setting definition -Werror.${ColourReset}")
+	add_definitions(-Werror)
+endif()
+
+message(STATUS "${BoldGreen}CMAKE_SOURCE_DIR: ${CMAKE_SOURCE_DIR}${ColourReset}")
+message(STATUS "${BoldGreen}CMAKE_BINARY_DIR: ${CMAKE_BINARY_DIR}${ColourReset}")
+
+
+#############################################################
+#############################################################
+# Platform-specific CMake configuration
+
+# MXE is a pretty cool cross-compilation environment that allows one
+# to build Win software right into GNU/Linux.
+if(MXE)
+
+	# Run the following cmake command line:
+	# x86_64-w64-mingw32.shared-cmake -DCMAKE_BUILD_TYPE=Release -DMXE=1 ../development
+	include(${CMAKE_TOOLCHAINS_PATH}/mxe-toolchain.cmake)
+	#include(${CMAKE_TOOLCHAINS_PATH}/mxe-toolchain-olivier.cmake)
+
+	# Set the name to the systemUname variable because in this situation that name
+	# is not found, it it passed as a flag in the command line.
+	set(SYSTEM_UNAME_S "mxe")
+
+elseif(UNIX AND NOT APPLE)
+
+	# Run the following cmake command line:
+	# cmake -DCMAKE_BUILD_TYPE=Debug ../development
+
+	include(${CMAKE_TOOLCHAINS_PATH}/unix-toolchain.cmake)
+
+elseif(WIN32 OR _WIN32)
+
+	# Run the following cmake command line:
+	# cmake -DCMAKE_BUILD_TYPE=Release ../development
+
+	include(${CMAKE_TOOLCHAINS_PATH}/win10-mingw64-toolchain.cmake)
+
+elseif(APPLE)
+
+	# Run the following cmake command line:
+	# cmake -DCMAKE_BUILD_TYPE=Release ../development
+
+	include(${CMAKE_TOOLCHAINS_PATH}/apple-macport-toolchain.cmake)
+
+endif()
+
+message("")
+message("${BoldRed}The build toolchain is: ${SYSTEM_UNAME_S}${ColourReset}")
+message("")
+
+
+#############################################################
+#############################################################
+# Essential software configuration
+
+if(NOT CMAKE_BUILD_TYPE)
+	set(CMAKE_BUILD_TYPE Release CACHE STRING
+		"Type of build, options are: None, Debug, Release, RelWithDebInfo, MinSizeRel."
+		FORCE)
+endif(NOT CMAKE_BUILD_TYPE)
+
+if(CMAKE_BUILD_TYPE MATCHES "Release")
+	#message(STATUS "Compiling in release mode.")
+	add_definitions("-DQT_NO_DEBUG_OUTPUT")
+endif()
+
+if(CMAKE_BUILD_TYPE MATCHES "Debug")
+	#message(STATUS "Compiling in debug mode.")
+	message(STATUS "Add definition -ggdb3 to format debug output for GDB.")
+	add_definitions(-ggdb3)
+endif()
+
+if(CMAKE_BUILD_TYPE MATCHES "RelWithDebInfo")
+	#message(STATUS "Compiling in release with debug info mode.")
+endif(CMAKE_BUILD_TYPE MATCHES "RelWithDebInfo")
+
+message(STATUS "${BoldYellow}CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}.${ColourReset}")
+message(STATUS "${BoldYellow}CMAKE_INSTALL_PREFIX: ${CMAKE_INSTALL_PREFIX}.${ColourReset}")
+
+
+# message(STATUS CMAKE_MODULE_PATH: ${CMAKE_MODULE_PATH})
+
+# Now actually deal with the C++ source code.
+add_subdirectory(IsoSpec++)
diff --git a/CMakeStuff/modules/FindIsoSpec++.cmake b/CMakeStuff/modules/FindIsoSpec++.cmake
new file mode 100644
index 0000000..83ee5bd
--- /dev/null
+++ b/CMakeStuff/modules/FindIsoSpec++.cmake
@@ -0,0 +1,34 @@
+# Copyright : Filippo Rusconi
+# License : GPL-3.0+
+# Authors : Filippo Rusconi
+
+find_path(IsoSpec++_INCLUDE_DIRS IsoSpec++/isoSpec++.h
+	PATHS /usr/local/include /usr/include
+	PATH_SUFFIXES isospec++ libisospec++ ENV PATH)
+
+find_library(IsoSpec++_LIBRARY NAMES isospec libisospec isospec++ libisospec++)
+
+if(IsoSpec++_INCLUDE_DIRS AND IsoSpec++_LIBRARY)
+
+	set(IsoSpec++_FOUND TRUE)
+
+endif()
+
+if(IsoSpec++_FOUND)
+
+	if (NOT IsoSpec++_FIND_QUIETLY)
+		message(STATUS "Found IsoSpec++_LIBRARY: ${IsoSpec++_LIBRARY}")
+	endif()
+
+	if(NOT TARGET IsoSpec++::IsoSpec++)
+
+		add_library(IsoSpec++::IsoSpec++ UNKNOWN IMPORTED)
+
+		set_target_properties(IsoSpec++::IsoSpec++ PROPERTIES
+			IMPORTED_LOCATION             "${IsoSpec++_LIBRARY}"
+			INTERFACE_INCLUDE_DIRECTORIES "${IsoSpec++_INCLUDE_DIRS}")
+
+	endif()
+
+endif()
+
diff --git a/CMakeStuff/modules/IsoSpec++Config.cmake.in b/CMakeStuff/modules/IsoSpec++Config.cmake.in
new file mode 100644
index 0000000..068b9b4
--- /dev/null
+++ b/CMakeStuff/modules/IsoSpec++Config.cmake.in
@@ -0,0 +1,22 @@
+# Copyright : Filippo Rusconi
+# License : GPL-3.0+
+# Authors : Filippo Rusconi
+
+
+set(IsoSpec++_INCLUDE_DIRS ${CMAKE_INSTALL_FULL_INCLUDEDIR}/IsoSpec++)
+
+set(IsoSpec++_LIBRARIES ${CMAKE_INSTALL_FULL_LIBDIR}/libIsoSpec++.so.${ISOSPEC_VERSION})
+
+if(NOT TARGET IsoSpec++::IsoSpec++)
+
+	add_library(IsoSpec++::IsoSpec++ UNKNOWN IMPORTED)
+
+	set_target_properties(IsoSpec++::IsoSpec++ PROPERTIES
+		IMPORTED_LOCATION "${CMAKE_INSTALL_FULL_LIBDIR}/libIsoSpec++.so.${ISOSPEC_VERSION}"
+		INTERFACE_INCLUDE_DIRECTORIES "${CMAKE_INSTALL_FULL_INCLUDEDIR}/IsoSpec++"
+		)
+
+endif()
+
+set(IsoSpec++_FOUND 1)
+
diff --git a/CMakeStuff/modules/pkgconfig/libisospec++.pc.in b/CMakeStuff/modules/pkgconfig/libisospec++.pc.in
new file mode 100644
index 0000000..aa88787
--- /dev/null
+++ b/CMakeStuff/modules/pkgconfig/libisospec++.pc.in
@@ -0,0 +1,12 @@
+prefix=${CMAKE_INSTALL_PREFIX}
+exec_prefix=${prefix}
+libdir=${CMAKE_INSTALL_LIBDIR}
+includedir=${CMAKE_INSTALL_INCLUDEDIR}
+
+Name: libIsoSpec++
+Description: IsoSpec++ library for calculating isotopic clusters
+Version: 3.0.0
+Libs: -lIsoSpec++
+Cflags: -I${includedir}/IsoSpec++ -I${includedir}
+Requires: 
+
diff --git a/CMakeStuff/outputColors.cmake b/CMakeStuff/outputColors.cmake
new file mode 100644
index 0000000..5d62365
--- /dev/null
+++ b/CMakeStuff/outputColors.cmake
@@ -0,0 +1,18 @@
+# We want to use some colors for the message output.
+string(ASCII 27 Esc)
+set(ColourReset "${Esc}[m")
+set(ColourBold  "${Esc}[1m")
+set(Red         "${Esc}[31m")
+set(Green       "${Esc}[32m")
+set(Yellow      "${Esc}[33m")
+set(Blue        "${Esc}[34m")
+set(Magenta     "${Esc}[35m")
+set(Cyan        "${Esc}[36m")
+set(White       "${Esc}[37m")
+set(BoldRed     "${Esc}[1;31m")
+set(BoldGreen   "${Esc}[1;32m")
+set(BoldYellow  "${Esc}[1;33m")
+set(BoldBlue    "${Esc}[1;34m")
+set(BoldMagenta "${Esc}[1;35m")
+set(BoldCyan    "${Esc}[1;36m")
+set(BoldWhite   "${Esc}[1;37m")
diff --git a/CMakeStuff/systemUname.cmake b/CMakeStuff/systemUname.cmake
new file mode 100644
index 0000000..79e68c7
--- /dev/null
+++ b/CMakeStuff/systemUname.cmake
@@ -0,0 +1,18 @@
+# Ask that uname -s be performed and store the value in SYSTEM_UNAME_S for
+# later reference.
+
+macro(get_uname_string)
+
+execute_process(COMMAND uname -s OUTPUT_VARIABLE SYSTEM_UNAME_S) 
+
+if(${SYSTEM_UNAME_S} MATCHES "^.*MINGW64.*")
+	message(STATUS "System detected as Windows, setting WIN64")
+	set(WIN64 1)
+#else()
+	#message(STATUS "System is not Windows.")
+endif()
+
+endmacro()
+
+get_uname_string()
+
diff --git a/CMakeStuff/toolchains/mxe-toolchain.cmake b/CMakeStuff/toolchains/mxe-toolchain.cmake
new file mode 100644
index 0000000..6ac2794
--- /dev/null
+++ b/CMakeStuff/toolchains/mxe-toolchain.cmake
@@ -0,0 +1,29 @@
+# File:///home/langella/developpement/git/pappsomspp/CMakeStuff/toolchains/mxe-toolchain.cmake# 
+# This file should be included if the command line reads like this:
+# x86_64-w64-mingw32.shared-cmake -DCMAKE_BUILD_TYPE=Release -DMXE=1 ..
+
+MESSAGE("MXE (M cross environment) https://mxe.cc/")
+message("Please run the configuration like this:")
+message("x86_64-w64-mingw32.shared-cmake -DMXE=1 -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release ../../development")
+
+
+set(CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES ${HOME_DEVEL_DIR}/mxe/usr/x86_64-w64-mingw32.shared/include)
+set(CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES ${HOME_DEVEL_DIR}/mxe/usr/x86_64-w64-mingw32.shared/include)
+
+
+if(WIN32 OR _WIN32)
+	message(STATUS "Building with WIN32 defined.")
+endif()
+
+
+find_package(ZLIB REQUIRED)
+
+
+set(QUAZIP_FOUND 1)
+set(QUAZIP_INCLUDE_DIR "${HOME_DEVEL_DIR}/quazip5/development")
+set(QUAZIP_LIBRARIES "${HOME_DEVEL_DIR}/quazip5/build-area/mxe/libquazip5.dll")
+set(QUAZIP_ZLIB_INCLUDE_DIR ${ZLIB_INCLUDE_DIRS})
+set(QUAZIP_INCLUDE_DIRS ${QUAZIP_INCLUDE_DIR} ${QUAZIP_ZLIB_INCLUDE_DIR})
+
+
+message(STATUS "QUAZIP_INCLUDE_DIR :${QUAZIP_INCLUDE_DIR}")
diff --git a/CMakeStuff/toolchains/unix-toolchain.cmake b/CMakeStuff/toolchains/unix-toolchain.cmake
new file mode 100644
index 0000000..aef8af5
--- /dev/null
+++ b/CMakeStuff/toolchains/unix-toolchain.cmake
@@ -0,0 +1,35 @@
+message("")
+message("${BoldRed}UNIX non APPLE environment${ColourReset}")
+message("")
+message("~~~~~~ Instructions ~~~~~~")
+message("On UNIX/GNU-Linux, please run the configuration like this:")
+message("cmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=<Debug | Release> -DCMAKE_INSTALL_PREFIX=</usr | your_dir> ../development")
+message("")
+
+set(CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES /usr/include)
+set(CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES /usr/include)
+
+## platform dependent compiler flags:
+include(CheckCXXCompilerFlag)
+
+if (WITH_FPIC)
+	add_definitions(-fPIC)
+endif()
+
+# Install cmake module
+install(FILES ${CMAKE_MODULE_PATH}/FindIsoSpec++.cmake 
+	DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/isospec)
+
+# Install cmake config
+configure_file (${CMAKE_MODULE_PATH}/IsoSpec++Config.cmake.in
+	${CMAKE_BINARY_DIR}/IsoSpec++Config.cmake)
+install(FILES ${CMAKE_BINARY_DIR}/IsoSpec++Config.cmake 
+	DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/isospec)
+
+# Install the PkgConfig config file
+configure_file (${CMAKE_MODULE_PATH}/pkgconfig/libisospec++.pc.in
+	${CMAKE_BINARY_DIR}/libisospec++.pc)
+install(FILES ${CMAKE_BINARY_DIR}/libisospec++.pc 
+	DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
+
+
diff --git a/CMakeStuff/toolchains/win10-mingw64-toolchain.cmake b/CMakeStuff/toolchains/win10-mingw64-toolchain.cmake
new file mode 100644
index 0000000..ed1c7d8
--- /dev/null
+++ b/CMakeStuff/toolchains/win10-mingw64-toolchain.cmake
@@ -0,0 +1,13 @@
+message("\n${BoldRed}WIN10-MINGW64 environment${ColourReset}\n")
+message("Please run the configuration like this:")
+message("cmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release ../development")
+
+
+if(WIN32 OR _WIN32)
+	message(STATUS "Building with WIN32 defined.")
+endif()
+
+
+# On Win10 all the code is relocatable.
+remove_definitions(-fPIC -Wall -pedantic -Wextra)
+
diff --git a/IsoSpec++/CMakeLists.txt b/IsoSpec++/CMakeLists.txt
index c4852e6..e8656a0 100644
--- a/IsoSpec++/CMakeLists.txt
+++ b/IsoSpec++/CMakeLists.txt
@@ -1,29 +1,62 @@
-project("IsoSpec")
-cmake_minimum_required(VERSION 2.6)
-
-set(my_sources
-unity-build.cpp
-)
-
-## platform dependent compiler flags:
-include(CheckCXXCompilerFlag)
-if (NOT WIN32) # we only want fPIC on non-windows systems (fPIC is implicitly true there)
-  CHECK_CXX_COMPILER_FLAG("-fPIC" WITH_FPIC)
-  if (WITH_FPIC)
-    add_definitions(-fPIC)
-  endif()
-
-  # Only add those definitions on non-windows systems
-  add_definitions(-std=c++17 -Wall -pedantic -Wextra)
-else()
-  ## On MSVS we need this for mmap
-  set(my_sources ${my_sources})
-  add_definitions(-DMMAN_LIBRARY)
+# CMake script for IsoSpec++ library
+# Author: Filippo Rusconi
+# Created: June 2020
+
+message(\n${BoldRed}"Now configuring IsoSpec++/ for ${PROJECT}"${ColourReset}\n)
+
+
+set(isospec_SRCS
+	unity-build.cpp
+	)
+
+
+# Not sure I understand this. Is this the way to test for MSVS in CMake land ?
+if(WIN32 OR _WIN32)
+
+	if(MSVC)
+		set(my_sources ${my_sources})
+		add_definitions(-DMMAN_LIBRARY)
+	endif()
+
 endif()
 
-add_library(IsoSpec SHARED ${my_sources})
 
-configure_file(IsoSpecConfig.cmake.in "${PROJECT_BINARY_DIR}/IsoSpecConfig.cmake" @ONLY)
+#message(STATUS "ISOSPEC_LIB_VERSION: ${ISOSPEC_LIB_VERSION}")
+#message(STATUS "ISOSPEC_LIB_SOVERSION: ${ISOSPEC_LIB_SOVERSION}")
+
+
+######### The shared library #########
+
+add_library(IsoSpec++-shared SHARED ${isospec_SRCS})
+
+set_target_properties(IsoSpec++-shared
+	PROPERTIES OUTPUT_NAME IsoSpec++
+	CLEAN_DIRECT_OUTPUT 1
+	VERSION ${ISOSPEC_LIB_VERSION}
+	SOVERSION ${ISOSPEC_LIB_SOVERSION}
+	)
+
+
+######### The static library #########
+
+add_library(IsoSpec++-static STATIC ${isospec_SRCS})
+
+set_target_properties(IsoSpec++-static
+	PROPERTIES OUTPUT_NAME IsoSpec++
+	CLEAN_DIRECT_OUTPUT 1
+	)
+
+
+# Install both shared and static libs
+
+install(TARGETS IsoSpec++-shared IsoSpec++-static
+	LIBRARY NAMELINK_SKIP 
+	DESTINATION ${CMAKE_INSTALL_LIBDIR}
+	# This one is for WIN32
+	RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+	)
+
 
-export(TARGETS IsoSpec FILE IsoSpecLibrary.cmake)
+# Do not know how this would still be useful.
+# export(TARGETS IsoSpec++ FILE IsoSpecLibrary.cmake)
 
