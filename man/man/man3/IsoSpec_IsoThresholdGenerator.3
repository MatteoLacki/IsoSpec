.TH "IsoSpec::IsoThresholdGenerator" 3 "Tue Oct 30 2018" "Version 1.95" "IsoSpec" \" -*- nroff -*-
.ad l
.nh
.SH NAME
IsoSpec::IsoThresholdGenerator \- The generator of isotopologues above a given threshold value\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <isoSpec++\&.h>\fP
.PP
Inherits \fBIsoSpec::IsoGenerator\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBget_conf_signature\fP (int *space) const override final"
.br
.ti -1c
.RI "\fBIsoThresholdGenerator\fP (\fBIso\fP &&iso, double _threshold, bool _absolute=true, int _tabSize=1000, int _hashSize=1000, bool reorder_marginals=true)"
.br
.RI "The move-constructor\&. "
.ti -1c
.RI "ISOSPEC_FORCE_INLINE bool \fBadvanceToNextConfiguration\fP () override final"
.br
.RI "Advance to the next, not yet visited, most probable isotopologue\&. "
.ti -1c
.RI "ISOSPEC_FORCE_INLINE double \fBlprob\fP () const override final"
.br
.RI "Get the log-probability of the current isotopologue\&. "
.ti -1c
.RI "ISOSPEC_FORCE_INLINE double \fBmass\fP () const override final"
.br
.RI "Get the mass of the current isotopologue\&. "
.ti -1c
.RI "ISOSPEC_FORCE_INLINE double \fBprob\fP () const override final"
.br
.RI "Get the probability of the current isotopologue\&. "
.ti -1c
.RI "void \fBterminate_search\fP ()"
.br
.RI "Block the subsequent search of isotopologues\&. "
.ti -1c
.RI "void \fBreset\fP ()"
.br
.ti -1c
.RI "size_t \fBcount_confs\fP ()"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The generator of isotopologues above a given threshold value\&. 

Attention: the calculated configurations are only partially ordeded and the user should not assume they will be ordered\&. This algorithm computes N isotopologues in O(N)\&. It is a considerable advantage w\&.r\&.t\&. the \fBIsoOrderedGenerator\fP\&. 
.PP
Definition at line 235 of file isoSpec++\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "IsoSpec::IsoThresholdGenerator::IsoThresholdGenerator (\fBIso\fP && iso, double _threshold, bool _absolute = \fCtrue\fP, int _tabSize = \fC1000\fP, int _hashSize = \fC1000\fP, bool reorder_marginals = \fCtrue\fP)"

.PP
The move-constructor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIiso\fP An instance of the \fBIso\fP class\&. 
.br
\fI_threshold\fP The threshold value\&. 
.br
\fI_absolute\fP If true, the _threshold is interpreted as the absolute minimal peak height for the isotopologues\&. If false, the _threshold is the fraction of the heighest peak's probability\&. 
.br
\fItabSize\fP The size of the extension of the table with configurations\&. 
.br
\fIhashSize\fP The size of the hash-table used to store subisotopologues and check if they have been already calculated\&. 
.RE
.PP

.PP
Definition at line 286 of file isoSpec++\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "ISOSPEC_FORCE_INLINE bool IsoSpec::IsoThresholdGenerator::advanceToNextConfiguration ()\fC [inline]\fP, \fC [final]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
Advance to the next, not yet visited, most probable isotopologue\&. 
.PP
\fBReturns:\fP
.RS 4
Return false if it is not possible to advance\&. 
.RE
.PP

.PP
Implements \fBIsoSpec::IsoGenerator\fP\&.
.PP
Definition at line 296 of file isoSpec++\&.h\&.
.SS "size_t IsoSpec::IsoThresholdGenerator::count_confs ()"
Count the number of configurations in the distribution\&. This can be used to pre-allocate enough memory to store it (e\&.g\&. std::vector's reserve() method - this is faster than depending on the vector's dynamic resizing, even though it means that the configuration space is walked through twice\&. This method has to be called before the first call to advanceToNextConfiguration and has undefined results (incl\&. segfaults) otherwise\&. 
.PP
Definition at line 376 of file isoSpec++\&.cpp\&.
.SS "ISOSPEC_FORCE_INLINE double IsoSpec::IsoThresholdGenerator::lprob () const\fC [inline]\fP, \fC [final]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
Get the log-probability of the current isotopologue\&. 
.PP
\fBReturns:\fP
.RS 4
The log-probability of the current isotopologue\&. 
.RE
.PP

.PP
Reimplemented from \fBIsoSpec::IsoGenerator\fP\&.
.PP
Definition at line 335 of file isoSpec++\&.h\&.
.SS "ISOSPEC_FORCE_INLINE double IsoSpec::IsoThresholdGenerator::mass () const\fC [inline]\fP, \fC [final]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
Get the mass of the current isotopologue\&. 
.PP
\fBReturns:\fP
.RS 4
The mass of the current isotopologue\&. 
.RE
.PP

.PP
Reimplemented from \fBIsoSpec::IsoGenerator\fP\&.
.PP
Definition at line 336 of file isoSpec++\&.h\&.
.SS "ISOSPEC_FORCE_INLINE double IsoSpec::IsoThresholdGenerator::prob () const\fC [inline]\fP, \fC [final]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
Get the probability of the current isotopologue\&. 
.PP
\fBReturns:\fP
.RS 4
The probability of the current isotopologue\&. 
.RE
.PP

.PP
Reimplemented from \fBIsoSpec::IsoGenerator\fP\&.
.PP
Definition at line 337 of file isoSpec++\&.h\&.
.SS "void IsoSpec::IsoThresholdGenerator::reset ()"
Reset the generator to the beginning of the sequence\&. Allows it to be reused, eg\&. to go through the conf space once, calculate the amount of space needed to store configurations, then to allocate that memory, and go through it again, this time saving configurations (and \fIis\fP in fact faster than allocating a std::vector and depending on it to grow as needed\&. This is cheaper than throwing away the generator and making a new one too: marginal distributions don't need to be recalculated\&. 
.PP
Definition at line 386 of file isoSpec++\&.cpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for IsoSpec from the source code\&.
